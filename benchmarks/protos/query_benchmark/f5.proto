// Copyright (c) 2018, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

syntax = "proto2";
package a10;
message A108 {
  repeated A109 a79 = 1;
}
message A109 {
  optional string a52 = 1;
  optional string a407 = 2;
  repeated string a80 = 3;
  repeated int32 a81 = 10;
  repeated int32 a82 = 11;
  repeated A110 a83 = 4;
  repeated A111 a84 = 5;
  repeated A112 a85 = 6;
  repeated A113 a86 = 7;
  optional A60 a87 = 8;
  optional A114 a88 = 9;
  optional string a408 = 12;
}
message A110 {
  optional string a52 = 1;
  repeated A113 a73 = 2;
  repeated A113 a86 = 6;
  repeated A110 a89 = 3;
  repeated A111 a84 = 4;
  message A115 {
    optional int32 a90 = 1;
    optional int32 a91 = 2;
    optional A116 a87 = 3;
  }
  repeated A115 a92 = 5;
  repeated A117 a93 = 8;
  optional A57 a87 = 7;
  message A118 {
    optional int32 a90 = 1;
    optional int32 a91 = 2;
  }
  repeated A118 a94 = 9;
  repeated string a95 = 10;
}
message A116 {
  repeated A119 a96 = 999;
  extensions 1000 to max;
}
message A113 {
  enum A59 {
    A120 = 1;
    A121 = 2;
    A122 = 3;
    A123 = 4;
    A124 = 5;
    A125 = 6;
    A126 = 7;
    A127 = 8;
    A128 = 9;
    A129 = 10;
    A130 = 11;
    A131 = 12;
    A132 = 13;
    A133 = 14;
    A134 = 15;
    A135 = 16;
    A136 = 17;
    A137 = 18;
  };
  enum A138 {
    A139 = 1;
    A140 = 2;
    A141 = 3;
  };
  optional string a52 = 1;
  optional int32 a97 = 3;
  optional A138 a98 = 4;
  optional A59 a99 = 5;
  optional string a100 = 6;
  optional string a101 = 2;
  optional string a102 = 7;
  optional int32 a103 = 9;
  optional string a104 = 10;
  optional A56 a87 = 8;
}
message A117 {
  optional string a52 = 1;
  optional A142 a87 = 2;
}
message A111 {
  optional string a52 = 1;
  repeated A143 a105 = 2;
  optional A70 a87 = 3;
  message A144 {
    optional int32 a90 = 1;
    optional int32 a91 = 2;
  }
  repeated A144 a94 = 4;
  repeated string a95 = 5;
}
message A143 {
  optional string a52 = 1;
  optional int32 a97 = 2;
  optional A76 a87 = 3;
}
message A112 {
  optional string a52 = 1;
  repeated A145 a106 = 2;
  repeated A146 a107 = 4;
  optional A147 a87 = 3;
}
message A145 {
  optional string a52 = 1;
  optional string a108 = 2;
  optional string a109 = 3;
  optional A98 a87 = 4;
  optional bool a110 = 5 [default = false];
  optional bool a111 = 6 [default = false];
}
message A146 {
  optional string a52 = 1;
  optional string a112 = 2;
  optional string a113 = 3;
  optional A148 a87 = 4;
}
message A60 {
  optional int32 a114 = 2 [default = 2];
  reserved 15;
  reserved 22;
  optional bool a115 = 24 [default = true];
  reserved 25;
  optional string a116 = 1;
  optional int32 a117 = 4 [default = 2];
  optional int32 a118 = 5 [default = 2];
  optional bool a119 = 6 [default = true];
  optional bool a120 = 7 [default = true];
  reserved 13;
  optional bool a121 = 21 [default = false];
  optional string a122 = 19;
  optional bool a123 = 26 [default = false];
  optional string a124 = 8;
  optional bool a125 = 10 [default = false];
  optional bool a126 = 27 [default = false];
  optional bool a127 = 28 [default = false];
  optional string a128 = 29;
  enum A149 {
    A150 = 1;
    A151 = 2;
    A152 = 3;
  }
  optional A149 a129 = 9 [default = A150];
  optional string a130 = 11;
  optional string a131 = 12;
  optional int32 a132 = 14 [default = 1];
  optional bool a133 = 16 [default = false];
  optional bool a134 = 17 [default = false];
  optional bool a135 = 18 [default = false];
  optional bool a136 = 42 [default = false];
  optional bool a31 = 23 [default = false];
  optional bool a137 = 31 [default = false];
  reserved 32;
  reserved 33;
  reserved 34;
  reserved 35;
  optional string a138 = 36;
  optional string a139 = 37;
  optional string a140 = 39;
  optional string a141 = 40;
  optional string a142 = 41;
  optional bool a143 = 43;
  optional string a144 = 44;
  optional string a145 = 45;
  repeated A119 a96 = 999;
  extensions 1000 to max;
  reserved 38;
}
message A57 {
  repeated string a146 = 4;
  repeated string a147 = 5;
  repeated string a148 = 6;
  optional bool a149 = 1 [default = false];
  optional bool a150 = 2 [default = false];
  optional bool a31 = 3 [default = false];
  optional bool a151 = 7;
  reserved 8;
  reserved 9;
  repeated A119 a96 = 999;
  extensions 1000 to max;
}
message A56 {
  optional A153 a152 = 1 [default = A154];
  enum A153 {
    A154 = 0;
    A155 = 1;
    A156 = 2;
  }
  optional bool a409 = 2;
  optional A157 a153 = 6 [default = A158];
  enum A157 {
    A158 = 0;
    A159 = 1;
    A160 = 2;
  }
  optional bool a154 = 5 [default = false];
  optional bool a31 = 3 [default = false];
  optional bool a155 = 10 [default = false];
  message A161 {
    optional string a52 = 1;
    optional string a105 = 2;
  };
  repeated A161 a156 = 11;
  optional bool a157 = 12 [default = false];
  optional bool a158 = 13 [default = true];
  repeated A119 a96 = 999;
  extensions 1000 to max;
  reserved 4;
}
message A142 {
  repeated A119 a96 = 999;
  extensions 1000 to max;
}
message A70 {
  optional string a159 = 1;
  reserved 4;
  optional bool a160 = 2;
  optional bool a31 = 3 [default = false];
  reserved 5;
  repeated A119 a96 = 999;
  extensions 1000 to max;
}
message A76 {
  optional bool a31 = 1 [default = false];
  repeated A119 a96 = 999;
  extensions 1000 to max;
}
message A147 {
  optional bool a161 = 20 [default = false];
  optional double a162 = 16 [default = -1.0];
  optional bool a31 = 33 [default = false];
  repeated A119 a96 = 999;
  extensions 1000 to max;
}
message A98 {
  enum A162 {
    A163 = 0;
    A164 = 1;
  }
  enum A165 {
    A67 = 0;
    A166 = 1;
    A167 = 2;
    A168 = 3;
  }
  enum A169 {
    A170 = 0;
    A171 = 1;
  }
  enum A172 {
    A173 = 0;
    A174 = 1;
    A175 = 2;
    A176 = 3;
    A177 = 4;
  }
  optional A162 a163 = 7 [default = A163];
  optional double a164 = 8 [default = -1.0];
  optional bool a165 = 9 [default = false];
  optional bool a166 = 10 [default = false];
  optional bool a167 = 26 [default = false];
  optional sint32 a168 = 11 [default = 256];
  optional sint32 a169 = 12 [default = 256];
  optional A165 a170 = 13 [default = A67];
  optional A169 a171 = 15 [default = A170];
  optional A169 a172 = 17 [default = A170];
  optional string a173 = 18;
  optional string a174 = 19;
  optional bool a110 = 20;
  optional bool a111 = 21;
  optional string a175 = 22;
  optional string a176 = 23;
  optional bool a177 = 29;
  optional int64 a178 = 24 [default = -1];
  optional int64 a179 = 25 [default = -1];
  enum A178 {
    A179 = 0;
    A180 = 1;
  }
  optional A178 a180 = 28 [default = A180];
  optional A172 a181 = 27 [default = A175];
  optional bool a31 = 33 [default = false];
  enum A181 {
    A182 = 0;
    A183 = 1;
    A184 = 2;
  }
  optional A181 a182 = 34 [default = A182];
  repeated A119 a96 = 999;
  extensions 1000 to max;
}
message A148 {
  enum A178 {
    A179 = 0;
    A180 = 1;
  }
  optional int64 a183 = 1 [default = -1];
  optional int64 a184 = 2 [default = -1];
  optional A178 a185 = 3 [default = A179];
  optional A98.A165 a170 = 4 [default = A67];
  optional string a174 = 5;
  optional int32 a168 = 6 [default = 256];
  optional int32 a169 = 7 [default = 256];
  optional double a164 = 8 [default = -1.0];
  optional bool a166 = 9 [default = false];
  optional bool a167 = 10 [default = false];
  optional A98.A172 a181 = 11 [default = A175];
  optional bool a31 = 33 [default = false];
  repeated A119 a96 = 999;
  extensions 1000 to max;
}
message A119 {
  message A185 {
    required string a186 = 1;
    required bool a187 = 2;
  }
  repeated A185 a52 = 2;
  optional string a188 = 3;
  optional uint64 a189 = 4;
  optional int64 a190 = 5;
  optional double a191 = 6;
  optional bytes a192 = 7;
  optional string a193 = 8;
}
message A114 {
  repeated A186 a194 = 1;
  message A186 {
    repeated int32 a195 = 1 [packed = true];
    repeated int32 a196 = 2 [packed = true];
    optional string a197 = 3;
    optional string a198 = 4;
    repeated string a199 = 6;
  }
}
message A187 {
  repeated A188 a200 = 1;
  message A188 {
    repeated int32 a195 = 1 [packed = true];
    optional string a201 = 2;
    optional int32 a202 = 3;
    optional int32 a91 = 4;
  }
}
